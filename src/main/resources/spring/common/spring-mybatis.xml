<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
  http://www.springframework.org/schema/context
  http://www.springframework.org/schema/context/spring-context-3.1.xsd
  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

       <!--<context:component-scan base-package="com.zly"></context:component-scan>-->
       <!--<context:annotation-config></context:annotation-config>-->

       <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
              <property name="driverClassName" value="${jdbc.driverClassName}"></property>
              <property name="url" value="${jdbc.databaseURL}"></property>
              <property name="username" value="${jdbc.username}"></property>
              <property name="password" value="${jdbc.password}"></property>
           <!--初始化连接池大小-->
              <property name="initialSize" value="${jdbc.initialSize}"></property>
           <!--连接池最大数量-->
              <property name="maxActive" value="${jdbc.maxActive}"></property>
           <!--连接池最大空闲-->
              <property name="maxIdle" value="${jdbc.maxIdle}"></property>
           <!--连接池最小空闲-->
              <property name="minIdle" value="${jdbc.minIdle}"></property>
           <!--获取连接最大等待时间-->
              <property name="maxWait" value="${jdbc.maxWait}"></property>
       </bean>

    <!--spring和myBatis完美整合，不需要mybatis的配置映射文件-->
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <property name="dataSource" ref="dataSource"></property>
            <!--自动扫描mapping.xml文件-->
            <property name="mapperLocations" value="classpath*:com/zly/mapping/**/*.xml"></property>
        </bean>

    <!--DAO接口所在包名，Spring会自动查找其下的类-->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="basePackage" value="com.zly.dao"></property>
            <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        </bean>


        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="dataSource"></property>
        </bean>




    <!--下面是两种事物管理方式1.使用aop对业务逻辑层实施注解，2.注解方式事物@Transactional-->

    <!--声明式容器事物管理，transaction-manager制定事物管理容器为transactionManager-->
        <tx:advice id="txAdvice" transaction-manager="transactionManager">
            <tx:attributes>
                <tx:method name="add*" propagation="REQUIRED"/>
                <tx:method name="get*" propagation="REQUIRED"></tx:method>
                <tx:method name="*" read-only="true"></tx:method>
            </tx:attributes>
        </tx:advice>

        <aop:config proxy-target-class="true">
            <!--只对业务逻辑层实施事物-->
            <aop:pointcut id="txPointcut" expression="execution(* com.zly.service..*(..))"></aop:pointcut>
            <!--Advisor定义，切入点和通知分别为txPointcut，txAdvice-->
            <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"></aop:advisor>
        </aop:config>


    <!--开启事物注解-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>-->
</beans>